@charset "UTF-8";
// 한글사용시 CHARACTER SET을 설정하지 않으면 에러가 난다.
// 주석처리가 가능하다. css 파일 컴파일 후에는 표시되지 않는다.
/* 블럭 주석처리가 가능하다. CSS와 동일*/
// 변수 (변하는 수)
// 연산 + - * /
// 바깥에 쓴 변수는 어디에서나 가능하나 안에서 쓴 변수는 안에서만 사용 가능
// 지역과 전역이라고 일컫는다.
// 지역은 해당 선택자 혹은 스코프안에서만 적용 -> !global은 전역변수로 바꾼다.
// 전역은 전체적으로 사용할 수 있다.
// 변수에 %를 사용해서 반응형 제작시 용이
$number: 100%;
$bg-color:blue;


.box{
    $number2: 200px !global;

    width: $number2;
    height: $number/2;
    background-color: $bg-color;
}
.box1{
    width: $number2*2; height: $number*2;
    background-color: $bg-color;
}
.menu{
    background-color: yellowgreen;
    .list{
        text-align: center;
        margin: {
            top:0px; left: 0px; right: 0px; bottom: 0px;
        }
        padding: 0;
        li {
            list-style: none;
            float: left;
            a{
                text-decoration: none;
                color: black;
                padding: 10px 20px;
                display: block;
                font: {
                    size:12px;
                    weight:bold;
                }
                &:hover{
                    background-color: red;
                    color: white;
                    transition: .6s all;
                }
            }
        }
        &::after{
            content: '';
            display: block;
            clear: both;
        }
    }
}

// .menu .list .sub {
//     position: absolute;
//     background-color: blue;
//     margin: 0; padding: 0;
//     width: 120px;
//     display: none;
//     li{
//         float: none;
//         a{

//         }
//     }
// }

// .menu .list li:hover .sub{
//     display: block;
// }

.menu .list .sub {
    position: absolute;
    background-color: blue;
    margin: 0; padding: 0;
    width: 120px;
    visibility: hidden;
    display: none;
    opacity: 0;
    transition: .4s all ease;
    transform: transalteX(20px);
    li{
        float: none;

    }
}

.menu .list li:hover .sub{
    visibility: visible;
    opacity: 1;
    transform: translateX(0px);
}
@import "variable.scss";
//파일을 불러올 때 사용

//논리 연산 -> 논리적인 결과를 만드는 방법

$max : 110px;

// .nemo{
//     width: 100px;
//     height: 100px;
//     @if ($max > 100){
//     background-color: $bg-green;
//     }
//     @if ($max < 30){
//     background-color: $bg-red;
//     }
// }

// 상속 -> placeholder
%circle {
    width: 200px;
    height: 200px;
    background-color: green;
}
//css에서는 보이지 않는다.
.nemo{
   @extend %circle;
}

.nemo2{
    /*width: 200px;
    height: 200px;
    background-color: green;*/
    //@extend .nemo;
    @extend %circle;
    border-radius: 50%;
}

// Mixin vs Function
// 공통적인 재활용이 가능하다.
// 개발의 가장 첫번째는 재활용이다.
@mixin fontMix ($color, $size) {
    color: $color;
    font-size: $size;
}
.open{
    // color: red;
    // font-size: 20px;
    @include fontMix(red,20px);
}
.close{
    // color: blue;
    // font-size: 40px;
    @include fontMix(blue,40px);
}
// function은 리턴이 있다.
@function fontFunc($width){
    @return $width + 200px;
}
//?? 다시 보기

.open{
    width: fontFunc(500px);
    height: 200px;
    background-color: gray;
}
